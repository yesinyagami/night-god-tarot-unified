name: 🌙 Ultimate Night God Tarot - CI/CD Pipeline

on:
  push:
    branches: 
      - main
      - develop
      - 'feature/*'
  pull_request:
    branches: 
      - main
      - develop

env:
  NODE_VERSION: '20.19.0'
  CACHE_KEY_PREFIX: night-god-tarot-v1

jobs:
  # 🔍 Code Quality & Security Scan
  code-analysis:
    name: 🔍 Code Quality & Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔍 TypeScript Type Check
        run: npm run type-check

      - name: 🧹 ESLint Code Quality
        run: npm run lint

      - name: 🔐 Security Audit
        run: npm audit --audit-level=high

      - name: 📊 Generate Coverage Report
        run: npm run test:coverage
        continue-on-error: true

      - name: 📈 Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # 🧪 Comprehensive Testing Suite
  testing:
    name: 🧪 Testing Suite (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: code-analysis
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['18.x', '20.x', '22.x']
        
    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🧪 Run Unit Tests
        run: npm test

      - name: 🔧 Build Application
        run: npm run build

      - name: 🧪 Test Monica AI Integration
        run: npm run test:monica-only
        env:
          MONICA_TEST_MODE: true
          VITE_MOCK_AI_RESPONSES: true

      - name: 📊 Test Build Size
        run: |
          echo "📦 Build Analysis:"
          du -sh dist/
          find dist/ -name "*.js" -exec du -h {} \; | head -5
          find dist/ -name "*.css" -exec du -h {} \; | head -5

  # 🏗️ Production Build & Optimization
  build-production:
    name: 🏗️ Production Build & Optimization
    runs-on: ubuntu-latest
    needs: [code-analysis, testing]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔧 Build Production Bundle
        run: npm run build
        env:
          NODE_ENV: production
          VITE_ENVIRONMENT: production

      - name: 📊 Bundle Analysis
        run: |
          echo "🎯 Production Bundle Analysis:"
          echo "================================"
          du -sh dist/
          echo ""
          echo "📄 HTML Files:"
          find dist/ -name "*.html" -exec ls -lh {} \;
          echo ""
          echo "🎨 CSS Files:"
          find dist/ -name "*.css" -exec ls -lh {} \;
          echo ""
          echo "📜 JavaScript Files:"
          find dist/ -name "*.js" -exec ls -lh {} \;
          echo ""
          echo "🖼️ Assets:"
          du -sh dist/assets/ 2>/dev/null || echo "No assets directory"

      - name: 📦 Upload Production Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: night-god-tarot-production-build
          path: dist/
          retention-days: 30

      - name: 📊 Lighthouse CI Performance Audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # 🚀 Deploy to GitHub Pages
  deploy-github-pages:
    name: 🚀 Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-production
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔧 Build for GitHub Pages
        run: npm run build
        env:
          NODE_ENV: production
          VITE_ENVIRONMENT: github-pages
          VITE_BASE_URL: ${{ github.event.repository.name }}

      - name: 📄 Setup Pages
        uses: actions/configure-pages@v4

      - name: 📦 Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist/

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # 🐳 Build & Push Docker Image
  docker-build:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: build-production
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏗️ Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/night-god-tarot:latest
            ${{ secrets.DOCKER_USERNAME }}/night-god-tarot:${{ github.sha }}
          labels: |
            org.opencontainers.image.title=Night God Tarot
            org.opencontainers.image.description=Ultimate AI-Powered Mystical Divination System
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

  # 📱 Mobile App Build (if applicable)
  mobile-build:
    name: 📱 Progressive Web App Build
    runs-on: ubuntu-latest
    needs: build-production
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 📱 Build PWA
        run: npm run build
        env:
          VITE_PWA_MODE: true
          NODE_ENV: production

      - name: 🔍 PWA Validation
        run: |
          echo "🔍 PWA Validation:"
          echo "=================="
          if [ -f "dist/manifest.json" ]; then
            echo "✅ manifest.json found"
            cat dist/manifest.json | jq '.'
          else
            echo "❌ manifest.json not found"
          fi
          
          if [ -f "dist/service-worker.js" ]; then
            echo "✅ service-worker.js found"
          else
            echo "❌ service-worker.js not found"
          fi

      - name: 📦 Upload PWA Build
        uses: actions/upload-artifact@v4
        with:
          name: night-god-tarot-pwa
          path: dist/

  # 🔔 Notification System
  notify-success:
    name: 🔔 Success Notification
    runs-on: ubuntu-latest
    needs: [deploy-github-pages, docker-build, mobile-build]
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
      - name: 🎉 Send Success Notification
        run: |
          echo "🌙✨ ULTIMATE NIGHT GOD TAROT DEPLOYMENT SUCCESS ✨🌙"
          echo "====================================================="
          echo "🚀 GitHub Pages: Deployed successfully"
          echo "🐳 Docker Image: Built and pushed"
          echo "📱 PWA Build: Generated successfully"
          echo "🔮 Monica AI: Ready for mystical divination"
          echo "🎴 78 Tarot Cards: All integrated"
          echo "📚 31万字 Novel: System active"
          echo "🏆 Achievement System: Operational"
          echo "====================================================="
          echo "✨ The mystical universe awaits your users! ✨"

  # 🚨 Failure Notification
  notify-failure:
    name: 🚨 Failure Notification
    runs-on: ubuntu-latest
    needs: [code-analysis, testing, build-production]
    if: failure()
    
    steps:
      - name: 🚨 Send Failure Notification
        run: |
          echo "🚨 NIGHT GOD TAROT BUILD FAILURE 🚨"
          echo "=================================="
          echo "❌ Build failed at: $(date)"
          echo "🔍 Check the logs above for details"
          echo "📧 Notification sent to development team"
          echo "=================================="