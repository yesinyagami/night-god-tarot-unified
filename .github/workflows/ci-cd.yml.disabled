name: Night God Tarot CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

env:
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # Lint and Type Check
  quality:
    name: Code Quality
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Type check
        run: npm run type-check
        continue-on-error: true

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-22.04
    needs: quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:coverage
        continue-on-error: true

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-22.04
    needs: [quality, test, env-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build-only
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  # Environment Check
  env-check:
    name: Environment Configuration Check
    runs-on: ubuntu-22.04
    needs: quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check environment configuration
        run: |
          echo "üîç Checking environment configuration..."
          
          MISSING_COUNT=0
          
          if [ -z "$MONICA_API_KEY" ]; then
            echo "‚ùå MONICA_API_KEY secret is missing"
            echo "   Add it at: https://github.com/${{ github.repository }}/settings/secrets/actions"
            ((MISSING_COUNT++))
          else
            echo "‚úÖ MONICA_API_KEY is configured"
          fi
          
          if [ -z "$JWT_SECRET" ]; then
            echo "‚ùå JWT_SECRET secret is missing"
            echo "   Add it at: https://github.com/${{ github.repository }}/settings/secrets/actions"
            ((MISSING_COUNT++))
          else
            echo "‚úÖ JWT_SECRET is configured"
          fi
          
          if [ $MISSING_COUNT -gt 0 ]; then
            echo ""
            echo "üö® $MISSING_COUNT critical secrets are missing!"
            echo "üîó Please add them at: https://github.com/${{ github.repository }}/settings/secrets/actions"
            echo "üìã Use the values from your .env file"
            exit 1
          fi
          
          echo "‚úÖ All required secrets are configured"
          echo "üéâ Environment check passed!"
        env:
          MONICA_API_KEY: ${{ secrets.MONICA_API_KEY }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          NODE_ENV: production
        continue-on-error: false

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-22.04
    needs: quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

      - name: Audit npm packages
        run: npm audit --audit-level=moderate
        continue-on-error: true

  # Build and Push Docker Image
  docker:
    name: Build Docker Image
    runs-on: ubuntu-22.04
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: NODE_ENV=production

  # Deploy to Staging
  deploy-to-staging:
    name: Deploy to Staging
    runs-on: ubuntu-22.04
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Verify required secrets
        run: |
          if [ -z "$MONICA_API_KEY" ]; then
            echo "Error: MONICA_API_KEY secret is not configured"
            exit 1
          fi
          if [ -z "$DB_PASSWORD" ]; then
            echo "Error: DB_PASSWORD secret is not configured"
            exit 1
          fi
          if [ -z "$JWT_SECRET" ]; then
            echo "Error: JWT_SECRET secret is not configured"
            exit 1
          fi
          echo "All required secrets are configured"
        env:
          MONICA_API_KEY: ${{ secrets.MONICA_API_KEY }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          
      - name: Deploy to staging server
        run: |
          echo "Deploying to staging environment..."
          echo "Environment: staging"
          echo "Monica API configured: $([ -n "$MONICA_API_KEY" ] && echo "‚úì" || echo "‚úó")"
          echo "Database configured: $([ -n "$DB_PASSWORD" ] && echo "‚úì" || echo "‚úó")"
          echo "JWT Secret configured: $([ -n "$JWT_SECRET" ] && echo "‚úì" || echo "‚úó")"
          # Add your actual deployment script here
        env:
          MONICA_API_KEY: ${{ secrets.MONICA_API_KEY }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          NODE_ENV: staging
          FRONTEND_URL: https://staging.nightgodtarot.com

  # Deploy to Production
  deploy-to-production:
    name: Deploy to Production
    runs-on: ubuntu-22.04
    needs: [docker]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Verify required secrets
        run: |
          if [ -z "$MONICA_API_KEY" ]; then
            echo "Error: MONICA_API_KEY secret is not configured"
            exit 1
          fi
          if [ -z "$DB_PASSWORD" ]; then
            echo "Error: DB_PASSWORD secret is not configured"
            exit 1
          fi
          if [ -z "$REDIS_PASSWORD" ]; then
            echo "Error: REDIS_PASSWORD secret is not configured"
            exit 1
          fi
          if [ -z "$JWT_SECRET" ]; then
            echo "Error: JWT_SECRET secret is not configured"
            exit 1
          fi
          echo "All required secrets are configured"
        env:
          MONICA_API_KEY: ${{ secrets.MONICA_API_KEY }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          
      - name: Deploy to production server
        run: |
          echo "Deploying to production environment..."
          echo "Environment: production"
          echo "Monica API configured: $([ -n "$MONICA_API_KEY" ] && echo "‚úì" || echo "‚úó")"
          echo "Database configured: $([ -n "$DB_PASSWORD" ] && echo "‚úì" || echo "‚úó")"
          echo "Redis configured: $([ -n "$REDIS_PASSWORD" ] && echo "‚úì" || echo "‚úó")"
          echo "JWT Secret configured: $([ -n "$JWT_SECRET" ] && echo "‚úì" || echo "‚úó")"
          # Add your actual deployment script here
        env:
          MONICA_API_KEY: ${{ secrets.MONICA_API_KEY }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          NODE_ENV: production
          FRONTEND_URL: https://nightgodtarot.com

  # Lighthouse Performance Test
  lighthouse:
    name: Lighthouse Performance
    runs-on: ubuntu-22.04
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build-only
        env:
          NODE_ENV: production

      - name: Start development server
        run: |
          npm run dev &
          echo $! > dev-server.pid
          sleep 10
        
      - name: Wait for server to be ready
        run: |
          timeout 60 bash -c "until curl -s http://localhost:5173 > /dev/null; do sleep 2; done"
          echo "Server is ready"
        
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            http://localhost:5173
            http://localhost:5173/demo
            http://localhost:5173/about
          uploadArtifacts: true
          temporaryPublicStorage: true
        continue-on-error: true
        
      - name: Stop development server
        run: |
          if [ -f dev-server.pid ]; then
            kill $(cat dev-server.pid) || true
            rm dev-server.pid
          fi

  # Notification on failure
  notify:
    name: Notify on Failure
    runs-on: ubuntu-22.04
    needs: [quality, test, build, security, env-check, lighthouse]
    if: always() && (failure() || cancelled())
    steps:
      - name: Send notification
        run: |
          echo "Pipeline failed! Sending notification..."
          echo "Failed jobs: ${{ join(needs.*.result, ', ') }}"
          # Add your notification logic here (Slack, Discord, email, etc.)
          # Example: curl webhook to Discord/Slack
        env:
          NOTIFICATION_WEBHOOK: ${{ secrets.NOTIFICATION_WEBHOOK }}