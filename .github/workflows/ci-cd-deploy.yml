name: Night God Tarot - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  VITE_MONICA_API_KEY: ${{ secrets.VITE_MONICA_API_KEY }}
  VITE_OPENAI_API_KEY: ${{ secrets.VITE_OPENAI_API_KEY }}
  VITE_ANTHROPIC_API_KEY: ${{ secrets.VITE_ANTHROPIC_API_KEY }}
  VITE_GOOGLE_API_KEY: ${{ secrets.VITE_GOOGLE_API_KEY }}
  VITE_DEEPSEEK_API_KEY: ${{ secrets.VITE_DEEPSEEK_API_KEY }}

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: |
        npm ci --prefer-offline --no-audit
        
    - name: 🔍 Run linting
      run: |
        npm run lint || true
        
    - name: 🧪 Run unit tests
      run: |
        npm run test:unit || true
        
    - name: 🏗️ Build application
      run: |
        npm run build
        
    - name: 📊 Generate build report
      run: |
        echo "Build completed at $(date)" > dist/build-info.txt
        echo "Commit: ${{ github.sha }}" >> dist/build-info.txt
        echo "Branch: ${{ github.ref_name }}" >> dist/build-info.txt
        
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/
        retention-days: 7

  lighthouse-audit:
    needs: test-and-build
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-files
        path: dist/
        
    - name: 🌟 Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v11
      with:
        configPath: './.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔐 Run security audit
      run: |
        npm audit --audit-level=moderate || true
        
    - name: 🛡️ Run OWASP dependency check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'Night God Tarot'
        path: '.'
        format: 'HTML'
        
    - name: 📤 Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: reports/

  deploy-github-pages:
    needs: [test-and-build, lighthouse-audit]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-files
        path: dist/
        
    - name: 🔧 Setup Pages
      uses: actions/configure-pages@v4
      
    - name: 📤 Upload to Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: dist/
        
    - name: 🚀 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  deploy-cloudflare:
    needs: [test-and-build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-files
        path: dist/
        
    - name: 🚀 Deploy to Cloudflare Pages
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        command: pages deploy dist --project-name=night-god-tarot

  notify-deployment:
    needs: [deploy-github-pages, deploy-cloudflare]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📢 Send deployment notification
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ job.status }}' === 'success' ? '✅' : '❌';
          const message = `${status} Deployment ${status === '✅' ? 'succeeded' : 'failed'} for commit ${{ github.sha }}`;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number || 1,
            body: message
          }).catch(() => console.log('No PR to comment on'));

  e2e-tests:
    needs: deploy-github-pages
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 📦 Install Playwright
      run: |
        npm ci --prefer-offline
        npx playwright install --with-deps
        
    - name: 🧪 Run E2E tests
      run: |
        npm run test:e2e || true
      env:
        PLAYWRIGHT_BASE_URL: ${{ steps.deployment.outputs.page_url }}
        
    - name: 📤 Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30